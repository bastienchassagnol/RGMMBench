abs(sum(p) - machine_limit) > 10^-6
abs(sum(p) - 1)
abs(sum(p) - 1) > 10^-6
devtools::load_all()
devtools::load_all()
devtools::load_all()
own_EM_implementation <- emnmix_multivariate (x = multivariate_simulation$x, k = 2,
itmax = 100, epsilon = 10^-6, start = start)
devtools::load_all()
rm(list = ls())
library(RGMMBench)
library(RGMMBench)
devtools::load_all()
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 1, nobservations = c(500))
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
corr_sequence <- seq(-0.8, 0.8, 0.2)
sigma_values <- list()
for (corr_1 in corr_sequence) {
for (corr_2 in corr_sequence) {
sigma_values[[glue::glue("comp_1_corr_{corr_1}_comp_2_{corr_2}")]] <-
array(c(1, corr_1, corr_1, 1, 1, corr_2, corr_2, 1), dim = c(2, 2, 2))
}
}
test_parameters_distribution <- benchmark_multivariate_GMM_estimation(
mixture_functions = relevant_mixture_functions[1],
initialisation_algorithms = c("kmeans"),
sigma_values = sigma_values[1],
mean_values = list("high OVL"=matrix(c(20, 22, 22, 20), nrow = 2, ncol = 2)),
proportions = list("balanced"=c(0.5, 0.5)),
Nbootstrap = 1, nobservations = c(500))
library(RGMMBench)
set.seed(20)
relevant_mixture_functions <- list(
"em R" = list(name_fonction = emnmix_multivariate, list_params = list()),
"Rmixmod" = list(name_fonction = RGMMBench::em_Rmixmod_multivariate, list_params = list()),
"mixtools" = list(name_fonction = em_mixtools_multivariate, list_params = list()),
"bgmm" = list(name_fonction = em_bgmm_multivariate, list_params = list()),
"mclust" = list(name_fonction = em_mclust_multivariate, list_params = list(prior = NULL)),
"EMCluster" = list(name_fonction = em_EMCluster_multivariate, list_params = list()),
"GMKMcharlie" = list(name_fonction = em_GMKMcharlie_multivariate, list_params = list()),
"flexmix" = list(name_fonction = em_flexmix_multivariate, list_params = list()),
"DCEM" = list(name_fonction = em_DCEM_multivariate, list_params = list()))
detach("package:RGMMBench", unload=TRUE)
?devtools::check()
devtools::load_all()
HDclassif_errors <- readRDS("../mixture_models/HD_low_OVL_parameters_2023-04-06_23-27-47/job_1/errors/scenario_2_init_algo_kmeans_package_name_HDclassif_bootstrap_3.rds")
em_HDclassif_multivariate(
x = HDclassif_errors$x, k = 2,
epsilon = HDclassif_errors$epsilon, itmax = HDclassif_errors$itmax, start = NULL)
HDclassif_multi_estimates <- em_HDclassif_multivariate(
x = HDclassif_errors$x, k = 2,
epsilon = HDclassif_errors$epsilon, itmax = HDclassif_errors$itmax, start = NULL)
head(x)
dim(x)
fit
mu
p
ncol(fit$Q[[j]])
fit$Q[[j]]
fit$b[j] * diag(D)
dim(t(fit$Q[[j]]))
dim(fit$Q[[j]])
diag(c(fit$a[j,1:d_j]-fit$b[j]))
d_j
fit$b[j] * diag(D)
dim(fit$Q[[j]])
dim(t(fit$Q[[j]]))
c(fit$a[j,1:d_j]-fit$b[j])
diag(c(fit$a[j,1:d_j]-fit$b[j]))
diag(1)
2 * diag(1)
c(fit$a[j,1:d_j]-fit$b[j])
diag(c(fit$a[j,1:d_j]-fit$b[j]), nrow = d_j)
fit$Q[[j]] %*% diag(c(fit$a[j,1:d_j]-fit$b[j]), nrow = d_j) %*% t(fit$Q[[j]]) + fit$b[j] * diag(D)
devtools::load_all()
HDclassif_multi_estimates <- em_HDclassif_multivariate(
x = HDclassif_errors$x, k = 2,
epsilon = HDclassif_errors$epsilon, itmax = HDclassif_errors$itmax, start = NULL)
check_parameters_validity_multivariate(HDclassif_multi_estimates)
EMMMixmfa_errors <- readRDS("../mixture_models/HD_low_OVL_parameters_2023-04-06_23-27-47/job_1/errors/scenario_1_init_algo_kmeans_package_name_EMMIXmfa_bootstrap_11.rds")
em_EMMIXmfa_multivariate(
x = EMMMixmfa_errors$x, k = 2,
epsilon = 10^-4, itmax = 20, start = NULL)
EMMIXmfa_multi_estimates <- em_EMMIXmfa_multivariate(
x = EMMMixmfa_errors$x, k = 2,
epsilon = 10^-4, itmax = 20, start = NULL)
EMMIXmfa_multi_estimates <- em_EMMIXmfa_multivariate(
x = EMMMixmfa_errors$x, k = 2,
epsilon = 10^-6, itmax = 1000, start = NULL)
check_parameters_validity_multivariate(HDclassif_multi_estimates)
HD_parameters_distribution <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$distributions
devtools::load_all()
HD_parameters_distribution <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$distributions
HD_config <- readRDS(testthat::test_path("fixtures", "HD_test_distribution.rds"))$config
HD_config <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$config
View(HD_config)
true_theta <- HD_config %>%
dplyr::filter(ID == 1) %>%
pull(true_parameters) %>%
magrittr::extract2(1)
library(dplyr)
true_theta <- HD_config %>%
dplyr::filter(ID == 1) %>%
pull(true_parameters) %>%
magrittr::extract2(1)
View(true_theta)
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta)
View(true_theta_df)
View(distribution_parameters)
match_symbol <- "p[[:digit:]]+|mu"
distribution_parameters <- distribution_parameters %>%
tidyr::pivot_longer(dplyr::matches(match_symbol),
names_to = "name_parameter",
values_to = "value_parameter"
) %>%
dplyr::select(c("package", "initialisation_method", "name_parameter", "value_parameter")) %>%
dplyr::mutate(
package = factor(.data$package, levels = unique(.data$package)),
name_parameter = factor(.data$name_parameter, levels = unique(.data$name_parameter))
)
View(distribution_parameters)
match_symbol
?tidyr::pivot_longer
test <- distribution_parameters %>% dplyr::matches(match_symbol)
test <- distribution_parameters %>% dplyr::select(dplyr::matches(match_symbol))
View(test)
devtools::load_all()
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta)
test <- distribution_parameters %>% dplyr::select(dplyr::matches(match_symbol))
View(test)
View(test)
stringr::str_match(c("sd_var10_var10_comp1", "mu20", "p1"), match_symbol)
match_symbol <- "^p[[:digit:]]+|mu"
stringr::str_match(c("sd_var10_var10_comp1", "mu20", "p1"), match_symbol)
test <- distribution_parameters %>% dplyr::select(dplyr::matches(match_symbol))
distribution_parameters <- distribution_parameters %>%
tidyr::pivot_longer(dplyr::matches(match_symbol),
names_to = "name_parameter",
values_to = "value_parameter"
) %>%
dplyr::select(c("package", "initialisation_method", "name_parameter", "value_parameter")) %>%
dplyr::mutate(
package = factor(.data$package, levels = unique(.data$package)),
name_parameter = factor(.data$name_parameter, levels = unique(.data$name_parameter))
)
View(distribution_parameters)
devtools::load_all()
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta, match_symbol = "^p[[:digit:]]+|mu")
boxplot_parameters <- ggplot(distribution_parameters, aes(x = .data$package, y = .data$value_parameter,
fill = .data$initialisation_method)) +
geom_boxplot(outlier.shape = 16, outlier.size = 0.5, position = position_dodge(width = 0.9), width = 0.4) +
stat_summary(
fun = mean, geom = "point", shape = 3, size = 1, colour = "yellow",
position = position_dodge(width = 0.9), show.legend = FALSE
) +
facet_wrap(~ .data$name_parameter, ncol = num_col, scales = "free_y") +
theme_bw() +
theme(
legend.position = "bottom",
axis.ticks.length = unit(.1, "cm"),
legend.text = element_text(size = 25),
strip.text = element_blank(),
plot.title = element_blank(),
plot.subtitle = element_blank(),
axis.title.y = element_blank(),
title = element_blank(),
panel.spacing = unit(.2, "pt")
) +
scale_fill_viridis_d() +
geom_hline(data = true_theta_df, aes(yintercept = .data$true_value), col = "red", linetype = "dashed", size = 0.8)
boxplot_parameters
boxplot_parameters <- ggplot(distribution_parameters, aes(x = .data$package, y = .data$value_parameter,
fill = .data$initialisation_method)) +
geom_boxplot(outlier.shape = 16, outlier.size = 0.5, position = position_dodge(width = 0.9), width = 0.4) +
stat_summary(
fun = mean, geom = "point", shape = 3, size = 1, colour = "yellow",
position = position_dodge(width = 0.9), show.legend = FALSE
) +
facet_wrap(~ .data$name_parameter, ncol = num_col, scales = "free_y") +
theme_bw() +
theme(
legend.position = "bottom",
axis.ticks.length = unit(.1, "cm"),
legend.text = element_text(size = 25),
strip.text = element_blank(),
plot.title = element_blank(),
plot.subtitle = element_blank(),
axis.title.y = element_blank(),
title = element_blank(),
panel.spacing = unit(.2, "pt")
) +
scale_fill_viridis_d()
boxplot_parameters
head(distribution_parameters)
distribution_parameters %>%
dplyr::group_by(dplyr::across(c("name_parameter", "package"))) %>%
dplyr::filter(.data$value_parameter > (quantile(.data$value_parameter, probs = c(0.25)) - 1.5 * stats::IQR(.data$value_parameter)) &
.data$value_parameter < (quantile(.data$value_parameter, probs = c(0.75)) + 1.5 * stats::IQR(.data$value_parameter)))
tibble::tibble(
name_parameter = names(unlist(formatted_true_theta)) %>%
factor(levels = unique(names(unlist(formatted_true_theta)))),
true_value = unlist(formatted_true_theta)) %>%
dplyr::select(dplyr::matches(match_symbol))
true_theta_df
tibble::tibble(
name_parameter = names(unlist(formatted_true_theta)) %>%
factor(levels = unique(names(unlist(formatted_true_theta)))),
true_value = unlist(formatted_true_theta)) %>%
dplyr::filter(grepl(match_symbol, .data$name_parameter))
true_theta_df <- tibble::tibble(
name_parameter = names(unlist(formatted_true_theta)) %>%
factor(levels = unique(names(unlist(formatted_true_theta)))),
true_value = unlist(formatted_true_theta)) %>%
dplyr::filter(grepl(match_symbol, .data$name_parameter))
boxplot_parameters <- ggplot(distribution_parameters, aes(x = .data$package, y = .data$value_parameter,
fill = .data$initialisation_method)) +
geom_boxplot(outlier.shape = 16, outlier.size = 0.5, position = position_dodge(width = 0.9), width = 0.4) +
stat_summary(
fun = mean, geom = "point", shape = 3, size = 1, colour = "yellow",
position = position_dodge(width = 0.9), show.legend = FALSE
) +
facet_wrap(~ .data$name_parameter, ncol = num_col, scales = "free_y") +
theme_bw() +
theme(
legend.position = "bottom",
axis.ticks.length = unit(.1, "cm"),
legend.text = element_text(size = 25),
strip.text = element_blank(),
plot.title = element_blank(),
plot.subtitle = element_blank(),
axis.title.y = element_blank(),
title = element_blank(),
panel.spacing = unit(.2, "pt")
) +
scale_fill_viridis_d() +
geom_hline(data = true_theta_df, aes(yintercept = .data$true_value), col = "red", linetype = "dashed", size = 0.8)
boxplot_parameters
boxplot_parameters <- boxplot_parameters + theme(axis.text.x = element_text(angle = 90, size = 12, hjust = 0.5, vjust = 0.4))
boxplot_parameters <- egg::tag_facet(boxplot_parameters,
tag_pool = true_theta_df$name_parameter,
open = "", close = "", hjust = -0.2, size = size_tag
)
boxplot_parameters
devtools::load_all()
colnames(HD_parameters_distribution)
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta,
match_symbol = "^p[[:digit:]]+$|mu_var1|sd_var1_var1|sd_var2_var1|sd_var2_var2")
View(true_theta_df)
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta,
match_symbol = "^p[[:digit:]]+$|mu_var1_|sd_var1_var1|sd_var2_var1|sd_var2_var2")
egg::tag_facet(boxplot_parameters,
tag_pool = true_theta_df$name_parameter,
open = "", close = "", hjust = -0.2, size = size_tag
)
devtools::load_all()
HD_hellinger <- plot_Hellinger(HD_parameters_distribution %>% filter(ID == 1), true_theta = true_theta)
devtools::load_all()
HD_hellinger <- plot_Hellinger(HD_parameters_distribution %>% filter(ID == 1), true_theta = true_theta)
HD_parameters_distribution <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$distributions
HD_config <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$config
true_theta <- HD_config %>%
dplyr::filter(ID == 1) %>%
pull(true_parameters) %>%
magrittr::extract2(1)
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta,
match_symbol = "^p[[:digit:]]+$|mu_var1_|sd_var1_var1|sd_var2_var1|sd_var2_var2")
library(dplyr)
HD_parameters_distribution <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$distributions
HD_config <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$config
true_theta <- HD_config %>%
dplyr::filter(ID == 1) %>%
pull(true_parameters) %>%
magrittr::extract2(1)
HD_boxplot <- plot_boxplots_parameters(HD_parameters_distribution %>% filter(ID == 1),
num_col = 2, true_theta = true_theta,
match_symbol = "^p[[:digit:]]+$|mu_var1_|sd_var1_var1|sd_var2_var1|sd_var2_var2")
HD_hellinger <- plot_Hellinger(HD_parameters_distribution %>% filter(ID == 1), true_theta = true_theta)
ggplot(hellinger_data, aes(
x = factor(.data$package, levels = unique(.data$package)),
y = .data$hellinger_value, fill = .data$initialisation_method
)) +
geom_boxplot(outlier.shape = 16, outlier.size = 0.5, position = position_dodge(width = 0.9), width = 0.4) +
stat_summary(
fun = mean, geom = "point", shape = 3, size = 1, colour = "red",
position = position_dodge(width = 0.9), show.legend = FALSE
) +
facet_wrap(~component, ncol = num_col) +
theme_bw() +
theme(
legend.position = "bottom",
strip.text = element_text(size = 18),
axis.ticks.length = unit(.1, "cm"),
legend.text = element_text(size = 25),
panel.spacing = unit(.2, "pt"),
legend.title = element_blank(),
axis.title.y = element_text(size = 15),
axis.title.x = element_blank(), plot.title = element_blank(), plot.subtitle = element_blank()
) +
scale_fill_viridis_d() +
ylab("Hellinger distance")
HD_hellinger
HD_hellinger <- plot_Hellinger(HD_parameters_distribution %>% filter(ID == 1), true_theta = true_theta)
HD_hellinger <- plot_Hellinger(HD_parameters_distribution %>% filter(ID == 1), true_theta = true_theta)
HD_hellinger
plot_correlation_Heatmap(HD_parameters_distribution %>% filter(ID == 1))
?HDclassif::hddc
?factanal
?prcomp
?prcomp
install.packages("ade4")
data(ade4::meaudret)
library(ade4)
meaudret
data(:meaudret)
data(meaudret)
View(meaudret)
meaudret$fau
rm(meaudret)
?ade4::between
ade4::dudi.coa
?ade4::bca
?ade4::dudi.coa
?ade4::dudi.pca
devtools::load_all()
devtools::load_all()
HD_density_distribution <- plot_HD_normal_density_distribution(true_theta)
HD_density_distribution <- plot_HD_density_distribution(true_theta)
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
View(tibble_dataset)
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
plot(bet1)
ade4::adegraphicsLoaded()
?ade4::adegraphicsLoaded()
install.packages("adegraphics")
plot(bet1)
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
HD_density_distribution$dfxy
HD_density_distribution$xax
adegraphicsLoaded()
?ade4::bca
?ADEgS
?adegraphics::ADEgS(list(g1, g2), layout = c(2, 1))
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
devtools::load_all()
ade4::adegraphicsLoaded()
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
requireNamespace("adegraphics", quietly = TRUE)
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
s.class(pca1$li, tibble_dataset$component, plot = FALSE)
g1 <- s.class(pca1$li, tibble_dataset$component)
g2 <- s.class(bet1$ls, tibble_dataset$component)
G <- adegraphics::ADEgS(list(g1, g2), layout = c(1, 2))
library(adegraphics)
g1 <- s.class(pca1$li, tibble_dataset$component, plot = F)
g2 <- s.class(bet1$ls, tibble_dataset$component, plot = F)
G <- adegraphics::ADEgS(list(g1, g2), layout = c(1, 2))
G
?ade4::dudi.pca
data(deug)
head(deug)
?s.corcircle
head(tibble_dataset)
g1 <- s.class(pca1$li, tibble_dataset$component, plot = F)
g2 <- s.arrow(pca1$c1, lab=names(tibble_dataset %>% dplyr::select(-component)), plot = F)
g3 <- s.corcircle(pca1$co, lab = names(tibble_dataset %>% dplyr::select(-component)),
full = FALSE, plot = FALSE)
G <- adegraphics::ADEgS(list(g1, g2), layout = c(1, 2))
G
G
g1 <- s.class(pca1$li, tibble_dataset$component, plot = F)
g2 <- s.arrow(pca1$c1, lab=names(tibble_dataset %>% dplyr::select(-component)), plot = F)
g3 <- s.corcircle(pca1$co, lab = names(tibble_dataset %>% dplyr::select(-component)),
full = FALSE, plot = FALSE)
G <- adegraphics::ADEgS(list(g1, g2, g3), layout = c(1, 3))
g1 <- s.class(pca1$li, tibble_dataset$component, plot = F)
g2 <- s.corcircle(pca1$co, lab = names(tibble_dataset %>% dplyr::select(-component)),
full = TRUE, plot = FALSE)
G <- adegraphics::ADEgS(list(g1, g2), layout = c(1, 2))
G
devtools::load_all()
library(adegraphics)
RColorBrewer::brewer.pal(k,"paired")
k <- 2
RColorBrewer::brewer.pal(k,"Paired")
RColorBrewer::brewer.pal(k+1,"Paired")
RColorBrewer::brewer.pal(10,"Paired")[1:k]
?s.class
devtools::load_all()
?adegraphics::s.class
install.packages("factoextra")
?factoextra::fviz_pca_ind
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(dplyr)
HD_parameters_distribution <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$distributions
HD_config <- readRDS(testthat::test_path("fixtures", "HD_high_OVL_balanced_circular.rds"))$config
true_theta <- HD_config %>%
dplyr::filter(ID == 1) %>%
pull(true_parameters) %>%
magrittr::extract2(1)
plot_correlation_Heatmap(HD_parameters_distribution %>% filter(ID == 1))
HD_density_distribution <- plot_HD_density_distribution(true_theta)
eigen_plot
devtools::load_all()
HD_density_distribution <- plot_HD_density_distribution(true_theta)
HD_density_distribution <- plot_HD_density_distribution(true_theta)
k
2:(k+1)
ind_plot <- adegraphics::s.class(pca1$li, tibble_dataset$component,
pellipses.lwd = 2, pellipses.border = 2:(k+1),
pellipses.col = rainbow(k), plot = FALSE, starSize = 0)
ind_plot <- adegraphics::s.class(pca1$li, tibble_dataset$component,
pellipses.lwd = 2, pellipses.col = rainbow(k),
plot = FALSE, starSize = 0)
ind_plot <- adegraphics::s.class(pca1$li, tibble_dataset$component, plot = FALSE)
table(tibble_dataset$component)
var_plot <- adegraphics::s.corcircle(pca1$co,
lab = names(tibble_dataset %>% dplyr::select(-component)),
full = TRUE, plot = FALSE)
ind_plot <- adegraphics::s.class(pca1$li)
head(pca1$li)
pca1$li %>% dim()
tibble_dataset$component %>% length()
ind_plot <- adegraphics::s.class(pca1$li, fac = tibble_dataset$component)
?adegraphics::s.class
ind_plot <- adegraphics::s.class(pca1$li, fac = as.factor(tibble_dataset$component))
levels(tibble_dataset$component)
library(ade4)
library(adegraphics)
ind_plot <- s.class(pca1$li, fac = tibble_dataset$component)
ind_plot <- s.label(pca1$li, fac = tibble_dataset$component)
ind_plot <- adegraphics::s.class(pca1$li, fac = tibble_dataset$component)
ind_plot <- ade4::s.class(pca1$li, fac = tibble_dataset$component)
ind_plot <- ade4::s.class(pca1$li, fac = tibble_dataset$component,
plot=FALSE, col=rainbow(k))
ind_plot <- s.class(pca1$li, fac = tibble_dataset$component,
plot=FALSE, col=rainbow(k))
ind_plot <- s.class(pca1$li, fac = tibble_dataset$component,
plot=FALSE, col=rainbow(k),
pellipses.lwd = 2, pellipses.border = 2:(k+1))
ind_plot
ind_plot <- s.class(pca1$li, fac = tibble_dataset$component,
plot=FALSE, col=rainbow(k),
pellipses.lwd = 2, pellipses.border = 2:(k+1),
pellipses.col = rainbow(k),
starSize = 0, ppoints.cex = 0.2)
ind_plot
ind_plot <- s.class(pca1$li, fac = tibble_dataset$component,
plot=FALSE, col=rainbow(k),
pellipses.lwd = 2, pellipses.border = 2:(k+1),
pellipses.col = rainbow(k),
starSize = 0, ppoints.cex = 0.2)
var_plot <- s.corcircle(pca1$co,
lab = names(tibble_dataset %>% dplyr::select(-component)),
full = TRUE, plot = FALSE)
ind_var_plot <- adegraphics::superpose(ind_plot, var_plot, plot = FALSE)
final <- adegraphics::insert(eigen_plot, ind_var_plot, posi = c(0.65, 0.65, 0.95, 0.95))
final
?adegraphics::insert
final <- adegraphics::insert(eigen_plot, ind_var_plot,  ratio=0.3,
posi = c(0.65, 0.65, 0.95, 0.95), plot=FALSE)
final
